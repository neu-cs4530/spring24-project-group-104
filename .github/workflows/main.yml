name: Covey.Town CI
on: # Controls when the action will run.
  # Triggers the workflow on push or pull request events but only for the master branch. If you want to trigger the action on other branches, add here
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-test: #
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: mydb
        ports:
          - 5432:5432
        # Set health checks to wait until postgres is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
        
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U testuser; do
            echo "$(date) - waiting for database to start"
            sleep 2
          done

      - name: Migrate Prisma schema
        run: cd townService; npm install && npx prisma migrate dev

      - name: Build and test backend service
        env: # Pass the Twilio secrets into environmental variables for the backend tests to use
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_API_AUTH_TOKEN: ${{ secrets.TWILIO_API_AUTH_TOKEN }}
          TWILIO_API_KEY_SECRET: ${{ secrets.TWILIO_API_KEY_SECRET }}
          TWILIO_API_KEY_SID: ${{ secrets.TWILIO_API_KEY_SID }}
          DATABASE_URL: postgresql://postgres:password123@localhost:5432/mydb
        run: cd townService; npm install && npm run prestart && npm run lint && npm test

      - name: Build and test frontend components
        run: cd frontend; npm install && npm run prestart && npm run lint && npm test